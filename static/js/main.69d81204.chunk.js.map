{"version":3,"sources":["Utility/Storage.ts","Components/AddTasks/AddTask.tsx","Components/TaskView/TaskItem.tsx","Components/TaskView/TaskList.tsx","Components/TaskView/TaskView.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["getAllTasks","tasks","localStorage","getItem","JSON","parse","saveTasks","setItem","stringify","useStyles","makeStyles","header","fontSize","fontWeight","color","form","display","flexDirection","margin","padding","borderRight","height","width","maxWidth","button","marginLeft","marginTop","backgroundColor","AddTask","props","useState","title","description","status","taskData","setTaskData","classes","handleChange","e","target","name","value","trim","noValidate","autoComplete","className","TextField","label","onChange","required","inputProps","maxLength","multiline","rowsMax","Button","variant","onClick","alert","duplicateTask","find","task","toLowerCase","onAdd","root","minWidth","cursor","overflowWrap","TaskItem","Card","draggable","onDragStart","dataTransfer","setData","style","opacity","handleDragStart","CardContent","Typography","gutterBottom","TaskList","map","index","TaskView","categories","id","filter","handleDragOver","preventDefault","handleDragEnd","category","onDragOver","onDrop","getData","handleDrop","handleOnDrop","onDragEnd","App","setTasks","push","addTask","droppedTask","droppedIndex","findIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTASMA,EAAc,WAClB,IAAMC,EAAQC,aAAaC,QAAQ,SACnC,OAAIF,EACKG,KAAKC,MAAMJ,GAEb,IAGHK,EAAY,SAACL,GACjBC,aAAaK,QAAQ,QAASH,KAAKI,UAAUP,K,OCbzCQ,EAAYC,YAAW,CAC5BC,OAAQ,CAAEC,SAAU,QAASC,WAAY,IAAKC,MAAO,WACrDC,KAAM,CACLC,QAAS,OACTC,cAAe,SACfC,OAAQ,UACRC,QAAS,MACTC,YAAa,iBACbC,OAAQ,OACRC,MAAO,OACPC,SAAU,QAEXC,OAAQ,CACPF,MAAO,MACPG,WAAY,OACZC,UAAW,MACXC,gBAAiB,aAIZ,SAASC,EAAQC,GAA6B,IAAD,EACnBC,mBAAe,CAC9CC,MAAO,GACPC,YAAa,GACbC,OAAQ,SAJ0C,mBAC5CC,EAD4C,KAClCC,EADkC,KAM7CC,EAAU3B,IAEVR,EAAgBD,IAEhBqC,EAAe,SAACC,GACC,UAAlBA,EAAEC,OAAOC,KACZL,EAAY,2BAAKD,GAAN,IAAgBH,MAAOO,EAAEC,OAAOE,MAAMC,UACrB,gBAAlBJ,EAAEC,OAAOC,MACnBL,EAAY,2BAAKD,GAAN,IAAgBF,YAAaM,EAAEC,OAAOE,MAAMC,WA0BzD,OACC,uBAAMC,YAAU,EAACC,aAAa,MAAMC,UAAWT,EAAQrB,KAAvD,UACC,qBAAK8B,UAAWT,EAAQzB,OAAxB,sBAEA,cAACmC,EAAA,EAAD,CACCC,MAAM,QACNC,SAAUX,EACVI,MAAOP,EAASH,MAChBS,KAAK,QACLS,UAAQ,EACRC,WAAY,CAAEC,UAAW,MAG1B,cAACL,EAAA,EAAD,CACCC,MAAM,cACNK,WAAS,EACTC,QAAS,EACTZ,MAAOP,EAASF,YAChBQ,KAAK,cACLQ,SAAUX,EACVY,UAAQ,EACRC,WAAY,CAAEC,UAAW,MAG1B,cAACG,EAAA,EAAD,CACCT,UAAWT,EAAQZ,OACnB+B,QAAQ,YACRzC,MAAM,UACN0C,QAlDe,WAAO,IAChBzB,EAAuBG,EAAvBH,MAAOC,EAAgBE,EAAhBF,YAEf,IAAKD,EACJ,OAAO0B,MAAM,yBAGd,IAAKzB,EACJ,OAAOyB,MAAM,+BAGd,IAAMC,EAAkCzD,EAAM0D,MAC7C,SAACC,GAAD,OAAgBA,EAAK7B,MAAM8B,gBAAkB9B,EAAM8B,iBAEhDH,EACHD,MAAM,GAAD,OAAIC,EAAc3B,MAAlB,oBAGNF,EAAMiC,MAAM5B,IA4BX,oB,4BCtFGzB,EAAYC,YAAW,CAC5BqD,KAAM,CACLC,SAAU,IACVrC,gBAAiB,UACjBsC,OAAQ,UACR/C,OAAQ,WAETa,MAAO,CACNnB,SAAU,SAEXoB,YAAa,CACZpB,SAAU,MACVE,MAAO,OACPoD,aAAc,gBAoCDC,MAhCf,SAAkBtC,GAAwB,IAAD,EACTA,EAAM+B,KAA7B7B,EADgC,EAChCA,MAAOC,EADyB,EACzBA,YACTI,EAAU3B,IAOhB,OACC,cAAC2D,EAAA,EAAD,CACCvB,UAAWT,EAAQ2B,KACnBM,WAAW,EACXC,YAAa,SAAChC,GAAD,OATS,SAACA,EAAQP,GAChCO,EAAEiC,aAAaC,QAAQ,KAAMzC,GAC7BO,EAAEC,OAAOkC,MAAMC,QAAU,MAOJC,CAAgBrC,EAAGP,IAHxC,SAKC,eAAC6C,EAAA,EAAD,WACC,cAACC,EAAA,EAAD,CAAYhC,UAAWT,EAAQL,MAAOjB,MAAM,cAAcgE,cAAY,EAAtE,SACE/C,IAEF,cAAC8C,EAAA,EAAD,CACC/D,MAAM,gBACNgE,cAAY,EACZvB,QAAQ,YACRV,UAAWT,EAAQJ,YAJpB,SAMEA,UChCS+C,MAVf,SAAkBlD,GACjB,OACC,qBAAK4C,MAAO,CAAEzD,QAAS,OAAQC,cAAe,SAAUK,MAAO,QAA/D,SACEO,EAAM5B,MAAM+E,KAAI,SAACpB,EAAMqB,GACvB,OAAO,cAAC,EAAD,CAAUrB,KAAMA,GAAWqB,S,MC2CvBC,MA7Cf,SAAkBrD,GACjB,IAMMsD,EAAyB,CAC9B,CAAEC,GAAI,OAAQrD,MAAO,OAAQ9B,MAPhB4B,EAAM5B,MAAMoF,QAAO,SAACzB,GAAD,MAAgC,SAAhBA,EAAK3B,WAQrD,CAAEmD,GAAI,aAAcrD,MAAO,cAAe9B,MAPxB4B,EAAM5B,MAAMoF,QAC9B,SAACzB,GAAD,MAAgC,eAAhBA,EAAK3B,WAOrB,CAAEmD,GAAI,OAAQrD,MAAO,OAAQ9B,MALjB4B,EAAM5B,MAAMoF,QAAO,SAACzB,GAAD,MAAgC,SAAhBA,EAAK3B,YAQ/CqD,EAAiB,SAAChD,GACvBA,EAAEiD,kBAQGC,EAAgB,SAAClD,GACtBA,EAAEC,OAAOkC,MAAMC,QAAU,KAG1B,OACC,qBAAK7B,UAAU,sBAAf,SACEsC,EAAWH,KAAI,SAACS,EAAoBR,GACpC,OACC,sBAECpC,UAAU,YACV6C,WAAYJ,EACZK,OAAQ,SAACrD,GAAD,OAjBQ,SAACA,EAAQ8C,GAC7B,IAAIrD,EAAQO,EAAEiC,aAAaqB,QAAQ,MACnC/D,EAAMgE,WAAW9D,EAAOqD,GAeLU,CAAaxD,EAAGmD,EAASL,KACxCW,UAAWP,EALZ,UAOC,qBAAK3C,UAAU,aAAf,SAA6B4C,EAAS1D,QACtC,cAAC,EAAD,CAAU9B,MAAOwF,EAASxF,UAPrBgF,SCFIe,MA3Bf,WAAgB,IAAD,EACYlE,mBAAS9B,KADrB,mBACPC,EADO,KACAgG,EADA,KAiBd,OACC,mCACC,sBAAKpD,UAAU,iBAAf,UACC,cAACjB,EAAD,CAASkC,MAjBM,SAACF,ILRJ,SAACA,GACf,IAAM3D,EAAQD,IACdC,EAAMiG,KAAKtC,GACXtD,EAAUL,GKMVkG,CAAQvC,GACRqC,EAAS,GAAD,mBAAKhG,GAAL,CAAY2D,QAgBlB,cAAC,EAAD,CAAU3D,MAAOA,EAAO4F,WAbR,SAAC9D,EAAeE,GAClC,IAAMmE,EAAcnG,EAAM0D,MAAK,SAACC,GAAD,OAAgBA,EAAK7B,QAAUA,KACxDsE,EAAepG,EAAMqG,WAAU,SAAC1C,GAAD,OAAgBA,EAAK7B,QAAUA,KACpEqE,EAAYnE,OAASA,EACrBhC,EAAMoG,GAAgBD,EACtBH,EAAS,YAAIhG,IACbK,EAAUL,YCTGsG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.69d81204.chunk.js","sourcesContent":["import { Task } from \"../Models/Task.model\";\r\n\r\nconst addTask = (task: Task) => {\r\n  const tasks = getAllTasks();\r\n  tasks.push(task);\r\n  saveTasks(tasks);\r\n}\r\n\r\n\r\nconst getAllTasks = () => {\r\n  const tasks = localStorage.getItem('tasks');\r\n  if (tasks) {\r\n    return JSON.parse(tasks)\r\n  }\r\n  return [];\r\n}\r\n\r\nconst saveTasks = (tasks: Task[]) => {\r\n  localStorage.setItem('tasks', JSON.stringify(tasks));\r\n}\r\n\r\nexport { addTask, getAllTasks, saveTasks }","import { Button, makeStyles, TextField } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { Task } from '../../Models/Task.model';\r\nimport { getAllTasks } from '../../Utility/Storage';\r\n\r\nconst useStyles = makeStyles({\r\n\theader: { fontSize: '1.5em', fontWeight: 700, color: '#005BA1' },\r\n\tform: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\tmargin: '1em 3em',\r\n\t\tpadding: '2em',\r\n\t\tborderRight: '2px solid #eee',\r\n\t\theight: '100%',\r\n\t\twidth: '100%',\r\n\t\tmaxWidth: '100%',\r\n\t},\r\n\tbutton: {\r\n\t\twidth: '50%',\r\n\t\tmarginLeft: 'auto',\r\n\t\tmarginTop: '2em',\r\n\t\tbackgroundColor: '#005BA1',\r\n\t},\r\n});\r\n\r\nexport function AddTask(props: { onAdd: Function }) {\r\n\tconst [taskData, setTaskData] = useState<Task>({\r\n\t\ttitle: '',\r\n\t\tdescription: '',\r\n\t\tstatus: 'todo',\r\n\t});\r\n\tconst classes = useStyles();\r\n\r\n\tconst tasks: Task[] = getAllTasks();\r\n\r\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target.name === 'title') {\r\n\t\t\tsetTaskData({ ...taskData, title: e.target.value.trim() });\r\n\t\t} else if (e.target.name === 'description') {\r\n\t\t\tsetTaskData({ ...taskData, description: e.target.value.trim() });\r\n\t\t}\r\n\t};\r\n\r\n\tconst onAddTask = () => {\r\n\t\tconst { title, description } = taskData;\r\n\r\n\t\tif (!title) {\r\n\t\t\treturn alert(`Title cannot be empty`);\r\n\t\t}\r\n\r\n\t\tif (!description) {\r\n\t\t\treturn alert(`Description cannot be empty`);\r\n\t\t}\r\n\r\n\t\tconst duplicateTask: Task | undefined = tasks.find(\r\n\t\t\t(task: Task) => task.title.toLowerCase() === title.toLowerCase()\r\n\t\t);\r\n\t\tif (duplicateTask) {\r\n\t\t\talert(`${duplicateTask.title} Already Exists`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tprops.onAdd(taskData);\r\n\t\t// alert(`${title} Added`);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form noValidate autoComplete='off' className={classes.form}>\r\n\t\t\t<div className={classes.header}>Add Task</div>\r\n\r\n\t\t\t<TextField\r\n\t\t\t\tlabel='Title'\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\tvalue={taskData.title}\r\n\t\t\t\tname='title'\r\n\t\t\t\trequired\r\n\t\t\t\tinputProps={{ maxLength: 10 }}\r\n\t\t\t/>\r\n\r\n\t\t\t<TextField\r\n\t\t\t\tlabel='Description'\r\n\t\t\t\tmultiline\r\n\t\t\t\trowsMax={4}\r\n\t\t\t\tvalue={taskData.description}\r\n\t\t\t\tname='description'\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\trequired\r\n\t\t\t\tinputProps={{ maxLength: 30 }}\r\n\t\t\t/>\r\n\r\n\t\t\t<Button\r\n\t\t\t\tclassName={classes.button}\r\n\t\t\t\tvariant='contained'\r\n\t\t\t\tcolor='primary'\r\n\t\t\t\tonClick={onAddTask}\r\n\t\t\t>\r\n\t\t\t\tAdd\r\n\t\t\t</Button>\r\n\t\t</form>\r\n\t);\r\n}\r\n","import { Card, CardContent, makeStyles, Typography } from '@material-ui/core';\r\nimport { Task } from '../../Models/Task.model';\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tminWidth: 100,\r\n\t\tbackgroundColor: '#F4F5F7',\r\n\t\tcursor: 'pointer',\r\n\t\tmargin: '4px 2px',\r\n\t},\r\n\ttitle: {\r\n\t\tfontSize: '1.5em',\r\n\t},\r\n\tdescription: {\r\n\t\tfontSize: '1em',\r\n\t\tcolor: '#333',\r\n\t\toverflowWrap: 'break-word',\r\n\t},\r\n});\r\n\r\nfunction TaskItem(props: { task: Task }) {\r\n\tconst { title, description } = props.task;\r\n\tconst classes = useStyles();\r\n\r\n\tconst handleDragStart = (e: any, title: string) => {\r\n\t\te.dataTransfer.setData('id', title);\r\n\t\te.target.style.opacity = '0.4';\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Card\r\n\t\t\tclassName={classes.root}\r\n\t\t\tdraggable={true}\r\n\t\t\tonDragStart={(e) => handleDragStart(e, title)}\r\n\t\t>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography className={classes.title} color='textPrimary' gutterBottom>\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography\r\n\t\t\t\t\tcolor='textSecondary'\r\n\t\t\t\t\tgutterBottom\r\n\t\t\t\t\tvariant='subtitle2'\r\n\t\t\t\t\tclassName={classes.description}\r\n\t\t\t\t>\r\n\t\t\t\t\t{description}\r\n\t\t\t\t</Typography>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport default TaskItem;\r\n","import { Task } from '../../Models/Task.model';\r\nimport TaskItem from './TaskItem';\r\n\r\nfunction TaskList(props: { tasks: Task[] }) {\r\n\treturn (\r\n\t\t<div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\r\n\t\t\t{props.tasks.map((task, index) => {\r\n\t\t\t\treturn <TaskItem task={task} key={index} />;\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default TaskList;\r\n","import { Category } from '../../Models/Category.model';\r\nimport { Task } from '../../Models/Task.model';\r\nimport TaskList from './TaskList';\r\nimport './Task.css';\r\n\r\nfunction TaskView(props: { tasks: Task[]; handleDrop: Function }) {\r\n\tconst todos = props.tasks.filter((task: Task) => task.status === 'todo');\r\n\tconst inProgress = props.tasks.filter(\r\n\t\t(task: Task) => task.status === 'inProgress'\r\n\t);\r\n\tconst done = props.tasks.filter((task: Task) => task.status === 'done');\r\n\r\n\tconst categories: Category[] = [\r\n\t\t{ id: 'todo', title: 'Todo', tasks: todos },\r\n\t\t{ id: 'inProgress', title: 'In Progress', tasks: inProgress },\r\n\t\t{ id: 'done', title: 'Done', tasks: done },\r\n\t];\r\n\r\n\tconst handleDragOver = (e: any) => {\r\n\t\te.preventDefault();\r\n\t};\r\n\r\n\tconst handleOnDrop = (e: any, id: string) => {\r\n\t\tlet title = e.dataTransfer.getData('id');\r\n\t\tprops.handleDrop(title, id);\r\n\t};\r\n\r\n\tconst handleDragEnd = (e: any) => {\r\n\t\te.target.style.opacity = '1';\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='task-view-container'>\r\n\t\t\t{categories.map((category: Category, index: number) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\tclassName='task-view'\r\n\t\t\t\t\t\tonDragOver={handleDragOver}\r\n\t\t\t\t\t\tonDrop={(e) => handleOnDrop(e, category.id)}\r\n\t\t\t\t\t\tonDragEnd={handleDragEnd}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<div className='task-title'>{category.title}</div>\r\n\t\t\t\t\t\t<TaskList tasks={category.tasks} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default TaskView;\r\n","import './App.css';\nimport { AddTask } from './Components/AddTasks/AddTask';\nimport TaskView from './Components/TaskView/TaskView';\nimport { getAllTasks, addTask, saveTasks } from './Utility/Storage';\nimport { useState } from 'react';\nimport { Task } from './Models/Task.model';\n\nfunction App() {\n\tconst [tasks, setTasks] = useState(getAllTasks());\n\n\tconst onAddTask = (task: Task) => {\n\t\taddTask(task);\n\t\tsetTasks([...tasks, task]);\n\t};\n\n\tconst handleDrop = (title: string, status: string) => {\n\t\tconst droppedTask = tasks.find((task: Task) => task.title === title);\n\t\tconst droppedIndex = tasks.findIndex((task: Task) => task.title === title);\n\t\tdroppedTask.status = status;\n\t\ttasks[droppedIndex] = droppedTask;\n\t\tsetTasks([...tasks]);\n\t\tsaveTasks(tasks);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className='view-container'>\n\t\t\t\t<AddTask onAdd={onAddTask} />\n\t\t\t\t<TaskView tasks={tasks} handleDrop={handleDrop} />\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}